// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package grant

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.Constraints, b.ko.Spec.Constraints) {
		delta.Add("Spec.Constraints", a.ko.Spec.Constraints, b.ko.Spec.Constraints)
	} else if a.ko.Spec.Constraints != nil && b.ko.Spec.Constraints != nil {
		if len(a.ko.Spec.Constraints.EncryptionContextEquals) != len(b.ko.Spec.Constraints.EncryptionContextEquals) {
			delta.Add("Spec.Constraints.EncryptionContextEquals", a.ko.Spec.Constraints.EncryptionContextEquals, b.ko.Spec.Constraints.EncryptionContextEquals)
		} else if len(a.ko.Spec.Constraints.EncryptionContextEquals) > 0 {
			if !ackcompare.MapStringStringPEqual(a.ko.Spec.Constraints.EncryptionContextEquals, b.ko.Spec.Constraints.EncryptionContextEquals) {
				delta.Add("Spec.Constraints.EncryptionContextEquals", a.ko.Spec.Constraints.EncryptionContextEquals, b.ko.Spec.Constraints.EncryptionContextEquals)
			}
		}
		if len(a.ko.Spec.Constraints.EncryptionContextSubset) != len(b.ko.Spec.Constraints.EncryptionContextSubset) {
			delta.Add("Spec.Constraints.EncryptionContextSubset", a.ko.Spec.Constraints.EncryptionContextSubset, b.ko.Spec.Constraints.EncryptionContextSubset)
		} else if len(a.ko.Spec.Constraints.EncryptionContextSubset) > 0 {
			if !ackcompare.MapStringStringPEqual(a.ko.Spec.Constraints.EncryptionContextSubset, b.ko.Spec.Constraints.EncryptionContextSubset) {
				delta.Add("Spec.Constraints.EncryptionContextSubset", a.ko.Spec.Constraints.EncryptionContextSubset, b.ko.Spec.Constraints.EncryptionContextSubset)
			}
		}
	}
	if len(a.ko.Spec.GrantTokens) != len(b.ko.Spec.GrantTokens) {
		delta.Add("Spec.GrantTokens", a.ko.Spec.GrantTokens, b.ko.Spec.GrantTokens)
	} else if len(a.ko.Spec.GrantTokens) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.GrantTokens, b.ko.Spec.GrantTokens) {
			delta.Add("Spec.GrantTokens", a.ko.Spec.GrantTokens, b.ko.Spec.GrantTokens)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.GranteePrincipal, b.ko.Spec.GranteePrincipal) {
		delta.Add("Spec.GranteePrincipal", a.ko.Spec.GranteePrincipal, b.ko.Spec.GranteePrincipal)
	} else if a.ko.Spec.GranteePrincipal != nil && b.ko.Spec.GranteePrincipal != nil {
		if *a.ko.Spec.GranteePrincipal != *b.ko.Spec.GranteePrincipal {
			delta.Add("Spec.GranteePrincipal", a.ko.Spec.GranteePrincipal, b.ko.Spec.GranteePrincipal)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.KeyID, b.ko.Spec.KeyID) {
		delta.Add("Spec.KeyID", a.ko.Spec.KeyID, b.ko.Spec.KeyID)
	} else if a.ko.Spec.KeyID != nil && b.ko.Spec.KeyID != nil {
		if *a.ko.Spec.KeyID != *b.ko.Spec.KeyID {
			delta.Add("Spec.KeyID", a.ko.Spec.KeyID, b.ko.Spec.KeyID)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.KeyRef, b.ko.Spec.KeyRef) {
		delta.Add("Spec.KeyRef", a.ko.Spec.KeyRef, b.ko.Spec.KeyRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if len(a.ko.Spec.Operations) != len(b.ko.Spec.Operations) {
		delta.Add("Spec.Operations", a.ko.Spec.Operations, b.ko.Spec.Operations)
	} else if len(a.ko.Spec.Operations) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.Operations, b.ko.Spec.Operations) {
			delta.Add("Spec.Operations", a.ko.Spec.Operations, b.ko.Spec.Operations)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.RetiringPrincipal, b.ko.Spec.RetiringPrincipal) {
		delta.Add("Spec.RetiringPrincipal", a.ko.Spec.RetiringPrincipal, b.ko.Spec.RetiringPrincipal)
	} else if a.ko.Spec.RetiringPrincipal != nil && b.ko.Spec.RetiringPrincipal != nil {
		if *a.ko.Spec.RetiringPrincipal != *b.ko.Spec.RetiringPrincipal {
			delta.Add("Spec.RetiringPrincipal", a.ko.Spec.RetiringPrincipal, b.ko.Spec.RetiringPrincipal)
		}
	}

	return delta
}
